name: release

on:
  push:
    tags:
      - 'v*'
  pull_request:
    paths:
    - '.github/workflows/release.yml'
    - '.goreleaser/'
    - '.goreleaser.yaml'

jobs:
  goreleaser:
    if: github.repository == 'tensorchord/envd-server'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: 1.18
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}     
      - name: Patch for pnpm setup
        run: cd dashboard
      - name: Setup pnpm
        uses: pnpm/action-setup@v2.2.4              
        with:
          version: 7.17.1
          run_install: |
            - cwd: "./dashboard"
      - name: Use Node.js 18
        uses: actions/setup-node@v3.8.1
        with:
          node-version: 18
          registry-url: https://registry.npmjs.org/
          cache: pnpm
          cache-dependency-path: dashboard/pnpm-lock.yaml          
      - name: Install frontend packages
        run: pnpm install
        working-directory: ./dashboard
      - name: Build frontend pages
        run: pnpm build
        working-directory: ./dashboard
      - name: Run GoReleaser
        uses: goreleaser/goreleaser-action@v3
        with:
          distribution: goreleaser
          version: latest
          args: release --rm-dist
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  # update-manifest:
  #   if: github.repository == 'tensorchord/envd-server'
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v3
  #       with:
  #         fetch-depth: 0
  #     - name: Remove v- prefix
  #       id: rmprefix
  #       env:
  #         VERSION: ${{ github.ref_name }}        
  #       run: |
  #         echo "${VERSION:1}"
  #     - name: Update values.yaml
  #       uses: fjogeleit/yaml-update-action@v0.12.3
  #       with:
  #         valueFile: 'manifests/values.yaml'
  #         propertyPath: 'image.tag'
  #         value: ${{ steps.rmprefix.outputs.value }}          
  #         branch: main
  #         masterBranchName: main
  #         targetBranch: main

  chart-publisher:
    if: github.repository == 'tensorchord/envd-server'
    needs: goreleaser
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure Git
        run: |
          git config user.name "tensorchord"
          git config user.email "tensorchord@users.noreply.github.com"

      - name: Install Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Run chart-releaser
        uses: helm/chart-releaser-action@v1.5.0
        with:
          charts_dir: manifests
          config: .github/chart-publish-config.yaml
        env:
          CR_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
  migration_publish:
    if: github.repository == 'tensorchord/envd-server'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Docker Login
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERIO_USERNAME }}
          password: ${{ secrets.DOCKERIO_TOKEN }}           
      - name: Remove prefix v
        id: rmprefixv
        env:
          VERSION: ${{ github.ref_name }}        
        run: |
          echo "::set-output name=ver::${VERSION:1}"
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          push: true
          file: sql/Dockerfile
          platforms: linux/amd64,linux/arm64
          context: sql/
          tags: tensorchord/envd-server-migration:${{ steps.rmprefixv.outputs.ver }}
          cache-from: type=gha
          cache-to: type=gha,mode=max