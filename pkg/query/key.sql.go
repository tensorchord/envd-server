// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: key.sql

package query

import (
	"context"
)

const createKey = `-- name: CreateKey :one
INSERT INTO keys (
  login_name, name, public_key
) VALUES (
  $1, $2, $3
)
RETURNING login_name, name, public_key
`

type CreateKeyParams struct {
	LoginName string `json:"login_name"`
	Name      string `json:"name"`
	PublicKey []byte `json:"public_key"`
}

type CreateKeyRow struct {
	LoginName string `json:"login_name"`
	Name      string `json:"name"`
	PublicKey []byte `json:"public_key"`
}

func (q *Queries) CreateKey(ctx context.Context, arg CreateKeyParams) (CreateKeyRow, error) {
	row := q.db.QueryRow(ctx, createKey, arg.LoginName, arg.Name, arg.PublicKey)
	var i CreateKeyRow
	err := row.Scan(&i.LoginName, &i.Name, &i.PublicKey)
	return i, err
}

const getKey = `-- name: GetKey :one
SELECT id, name, login_name, public_key FROM keys
WHERE login_name = $1 AND name = $2 LIMIT 1
`

type GetKeyParams struct {
	LoginName string `json:"login_name"`
	Name      string `json:"name"`
}

func (q *Queries) GetKey(ctx context.Context, arg GetKeyParams) (Key, error) {
	row := q.db.QueryRow(ctx, getKey, arg.LoginName, arg.Name)
	var i Key
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.LoginName,
		&i.PublicKey,
	)
	return i, err
}

const listKeys = `-- name: ListKeys :many
SELECT id, name, login_name, public_key FROM keys
WHERE login_name = $1
`

func (q *Queries) ListKeys(ctx context.Context, loginName string) ([]Key, error) {
	rows, err := q.db.Query(ctx, listKeys, loginName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Key
	for rows.Next() {
		var i Key
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.LoginName,
			&i.PublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
