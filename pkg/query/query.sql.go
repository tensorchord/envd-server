// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: query.sql

package query

import (
	"context"

	"github.com/jackc/pgtype"
)

const createImageInfo = `-- name: CreateImageInfo :one
INSERT INTO image_info (
  owner_token, name, digest, created, size, labels
) VALUES (
  $1, $2, $3, $4, $5, $6
)
RETURNING id, owner_token, name, digest, created, size, labels
`

type CreateImageInfoParams struct {
	OwnerToken string       `json:"owner_token"`
	Name       string       `json:"name"`
	Digest     string       `json:"digest"`
	Created    int64        `json:"created"`
	Size       int64        `json:"size"`
	Labels     pgtype.JSONB `json:"labels"`
}

func (q *Queries) CreateImageInfo(ctx context.Context, arg CreateImageInfoParams) (ImageInfo, error) {
	row := q.db.QueryRow(ctx, createImageInfo,
		arg.OwnerToken,
		arg.Name,
		arg.Digest,
		arg.Created,
		arg.Size,
		arg.Labels,
	)
	var i ImageInfo
	err := row.Scan(
		&i.ID,
		&i.OwnerToken,
		&i.Name,
		&i.Digest,
		&i.Created,
		&i.Size,
		&i.Labels,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  login_name, password_hash, public_key
) VALUES (
  $1, $2, $3
)
RETURNING login_name, public_key
`

type CreateUserParams struct {
	LoginName    string `json:"login_name"`
	PasswordHash string `json:"password_hash"`
	PublicKey    []byte `json:"public_key"`
}

type CreateUserRow struct {
	LoginName string `json:"login_name"`
	PublicKey []byte `json:"public_key"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser, arg.LoginName, arg.PasswordHash, arg.PublicKey)
	var i CreateUserRow
	err := row.Scan(&i.LoginName, &i.PublicKey)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const getImageInfo = `-- name: GetImageInfo :one
SELECT id, owner_token, name, digest, created, size, labels FROM image_info
WHERE owner_token = $1 AND name = $2 LIMIT 1
`

type GetImageInfoParams struct {
	OwnerToken string `json:"owner_token"`
	Name       string `json:"name"`
}

func (q *Queries) GetImageInfo(ctx context.Context, arg GetImageInfoParams) (ImageInfo, error) {
	row := q.db.QueryRow(ctx, getImageInfo, arg.OwnerToken, arg.Name)
	var i ImageInfo
	err := row.Scan(
		&i.ID,
		&i.OwnerToken,
		&i.Name,
		&i.Digest,
		&i.Created,
		&i.Size,
		&i.Labels,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, login_name, password_hash, public_key FROM users
WHERE login_name = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, loginName string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, loginName)
	var i User
	err := row.Scan(
		&i.ID,
		&i.LoginName,
		&i.PasswordHash,
		&i.PublicKey,
	)
	return i, err
}

const listImageByOwner = `-- name: ListImageByOwner :many
SELECT id, owner_token, name, digest, created, size, labels FROM image_info
WHERE owner_token = $1
`

func (q *Queries) ListImageByOwner(ctx context.Context, ownerToken string) ([]ImageInfo, error) {
	rows, err := q.db.Query(ctx, listImageByOwner, ownerToken)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ImageInfo
	for rows.Next() {
		var i ImageInfo
		if err := rows.Scan(
			&i.ID,
			&i.OwnerToken,
			&i.Name,
			&i.Digest,
			&i.Created,
			&i.Size,
			&i.Labels,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, login_name, password_hash, public_key FROM users
ORDER BY id
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.LoginName,
			&i.PasswordHash,
			&i.PublicKey,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
